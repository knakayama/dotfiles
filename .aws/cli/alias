[toplevel]

sam-invoke =
  !f() {
    [[ -n "$2" ]] && ops="--payload file://$2"
    aws lambda invoke \
      --function-name "$1" \
      --log-type Tail \
      --query 'LogResult' \
      $ops \
      /dev/stdin \
    | perl -MMIME::Base64 -ne 'print decode_base64($_)'
  }; f

sam-deploy =
  !f() {
    aws cloudformation package \
      --template-file "$1" \
      --output-template-file "new-$1" \
      --s3-bucket "$2" \
    | grep -vE '^Execute|^aws' \
    && aws cloudformation deploy \
      --template-file "new-$1" \
      --stack-name "$3" \
      --capabilities CAPABILITY_IAM \
    | while read line; do
      printf "\n$line\n"
      aws cloudformation describe-stack-events \
        --stack-name "$3" \
        --output text \
        --query 'StackEvents[].[ResourceStatus,LogicalResourceId,ResourceType,Timestamp]' \
      | sort -k4r \
      | perl -ane 'print if !$seen{$F[1]}++' \
      | column -t
    done
    [[ -f "new-$1" && -n "$4" && "$4" == "-n" ]] || rm "new-$1"
  }; f

sam-info =
  !f() {
    aws cloudformation describe-stack-resource \
      --stack-name "$1" \
      --logical-resource-id "$2"
  }; f

sam-info-v =
  !f() {
    aws cloudformation describe-stack-resources \
      --stack-name "$1" \
      --query 'StackResources[?ResourceType==`AWS::Lambda::Function`]'
  }; f

sam-remove =
  !f() {
    aws cloudformation delete-stack \
      --stack-name "$1" \
    && aws cloudformation describe-stack-events \
      --stack-name "$1" \
      --output text \
      --query 'StackEvents[].[ResourceStatus,LogicalResourceId,ResourceType,Timestamp]' \
    | sort -k4r \
    | perl -ane 'print if !$seen{$F[1]}++' \
    | column -t
  }; f

cfn-v =
  !f() {
    aws cloudformation validate-template \
      --template-body file://$1
  }; f
